<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Amish Kumar Naidu</title>
    <link>https://amish.naidu.dev/projects/</link>
    <description>Recent content in Projects on Amish Kumar Naidu</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2022 Amish K. Naidu</copyright>
    <lastBuildDate>Sun, 27 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://amish.naidu.dev/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fly</title>
      <link>https://amish.naidu.dev/projects/fly/</link>
      <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/fly/</guid>
      <description>Source GitHub
Screenshots A simple flight simulator in C++11/OpenGL.
Features a procedurally generated infinite terrain over which you can fly around. With explosions!
Controls: WASD or Arrow keys to change the plane&amp;rsquo;s direction. Click anywhere on the screen and move the mouse to rotate the camera, and scroll to change zoom.
Command line arguments: usage: Fly [options...] -h | --help Print this help text and exit -w X | wX Set window width to X (default: 1024) -H Y | HY Set window height to Y (default: 720) -s Z | sZ Set seed to Z (default: random seed) -f | --fullscreen Set fullscreen mode (default: false) --wireframe Render in wireframe mode (default: false) --plane-box Draw a bounding box around the plane (default: false) YouTube Playlist: Link to YouTube Playlist</description>
    </item>
    
    <item>
      <title>SimpleNES</title>
      <link>https://amish.naidu.dev/projects/simplenes/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/simplenes/</guid>
      <description>An NES emulator written in C++ for nothing but fun.
Roughly 40-50% of games should work (ie. games that use either no mapper or mappers 1, 2 or 3).
Examples of games that have been tested to run (but NOT limited to):
(USA/Japan or World versions only i.e. NTSC compatible)
Super Mario Bros. Contra/Projects Adventure Island Ninja Gaiden Wrecking Crew Megaman and Megaman 2 Mario Bros. Donky Kong and Donkey Kong Jr.</description>
    </item>
    
    <item>
      <title>SeiyuuList</title>
      <link>https://amish.naidu.dev/projects/seiyuu/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/seiyuu/</guid>
      <description>A better seiyuu list.
It lets you search anime voice actors and browse all of their character roles. Unlike the pages from anilist/MAL, this gives you more information on the anime alongside their roles, this allows you to sort the list by say the anime popularity or scores. This is particularly useful because popular voice actors tend to have many roles, so looking at their super long list can get you lost.</description>
    </item>
    
    <item>
      <title>Stackledge</title>
      <link>https://amish.naidu.dev/projects/stackledge/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/stackledge/</guid>
      <description>A reddit clone.
Upvote/downvote based content aggregation Threaded comments User pages, indiviudal category and all categories pages Trending, Top, New sorting modes Feed paginated Source GitHub
Screenshots Deploying Set public_html/ as the public directory, import the schema and create new categories by inserting into the Category table</description>
    </item>
    
    <item>
      <title>Ryuuk</title>
      <link>https://amish.naidu.dev/projects/ryuuk/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/ryuuk/</guid>
      <description>Ryuuk is a concurrent web-server written in C++.
Currently Ryuuk runs only in POSIX compliant environments only.
Building GitHub
nix
$ git clone https://github.com/amhndu/ryuuk $ cd ryuuk $ mkdir build &amp;amp;&amp;amp; cd build $ cmake .. $ make -ji # where i = no. of cores you can spare Windows
Who uses windows anyway ?
Currently not portable with windows. Contributions welcome.
Why Becuase why not ? We wanted to learn a thing or two about sockets &amp;amp; HTTP Keikaku Short term * Basic HTTP 1.</description>
    </item>
    
    <item>
      <title>TwoCars</title>
      <link>https://amish.naidu.dev/projects/twocars/</link>
      <pubDate>Thu, 09 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/twocars/</guid>
      <description>A clone of the 2 Cars game in C++14/SFML TwoCars is a simple 2D endless runner where you simultaneously control two cars while taking all the circles and avoiding all triangles to keep running. How much can you score ?
Keybindings: F/J to change lane of the left/right car
Source GitHub
Screenshots Video Watch on YouTube</description>
    </item>
    
    <item>
      <title>life.hs</title>
      <link>https://amish.naidu.dev/projects/life-hs/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/life-hs/</guid>
      <description>A dead-simple simulator for Conway&amp;rsquo;s Game of Life in Haskell.
Source: GitHub
Compiling:
$ ghc --make life.hs Usage:
./life &amp;lt; seeds/PulsarSeed.txt Or
$ runhaskell life.hs &amp;lt; seeds/GliderSeed.txt Seeds are space separeted matrices of 0 and 1 representing dead/alive cell. Note that it uses ANSI escape sequences so this may not work on Windows.</description>
    </item>
    
    <item>
      <title>Prattle</title>
      <link>https://amish.naidu.dev/projects/prattle/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/prattle/</guid>
      <description>
Prattle is a simple chat program with a Client-Server architecture, a collaboration with Koushtav Chakrabarty.
Programmed with C++11 with the SFML library for graphics and TGUI as the GUI framework.
Screenshots For more information, view on GitHub </description>
    </item>
    
    <item>
      <title>xkcd-shuffle</title>
      <link>https://amish.naidu.dev/projects/xkcd-shuffle/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/xkcd-shuffle/</guid>
      <description>xkcd-shuffle aims to fix the xkcd random button, it lets you browse xkcd in a random order, without presenting the same comic multiple times (and with no biases). The order (and the current comic) is preserved between sessions so that you can continue where you left.
You can also copy the URL of the link &#39;Direct link with Seed&#39; below the comic to continue anywhere.
Tip: You can easily browse with &#34;</description>
    </item>
    
    <item>
      <title>mediaplayer.py</title>
      <link>https://amish.naidu.dev/projects/mediaplayer.py/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/mediaplayer.py/</guid>
      <description>I wrote this script some years ago to show currently playing music on conky. I also used this to bind some mediaplayer keys from Openbox to control playback and volume.
Download it here: https://github.com/amhndu/conky-cards/blob/master/mediaplayer.py
This is most likely in need of some re-write. Mostly because I&amp;rsquo;m a better programmer now compared to when I wrote it 4 years ago and the code is hard to look at currently.</description>
    </item>
    
    <item>
      <title>Gravity</title>
      <link>https://amish.naidu.dev/projects/gravity/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/gravity/</guid>
      <description>An Orbital survival game Gravity is a survial game set in space, you are in a space station orbiting Earth but things have gone awry and you have a situation with broken satellites, how long can you survie ? (Yes, the premise is very similar to that Hollywood movie of the same name). Programmed in C++11 with the SFML library for graphics. I made this is as my final project in school.</description>
    </item>
    
    <item>
      <title>Mini Tanks</title>
      <link>https://amish.naidu.dev/projects/tanks-game/</link>
      <pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://amish.naidu.dev/projects/tanks-game/</guid>
      <description>A turn-based, artillery game where you destroy other tanks to win in a fully destructible, procedurally generated terrain. Supports multiplayer with upto 8 local players. This was inspired by Pocket Tanks and Scorched Earth. Programmed in C++11 with SFML used for graphics.
Controls and Objective Use your mouse to click on the HUD or press R to set the Rotation of the turret, similarly set power by clicking the power bar (or by hovering the cursor above it and using your scroll wheel)</description>
    </item>
    
  </channel>
</rss>
