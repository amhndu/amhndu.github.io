<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Amish K. Naidu</title>
    <link>/projects/</link>
    <description>Recent content in Projects on Amish K. Naidu</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2019 Amish K. Naidu</copyright>
    <lastBuildDate>Sun, 27 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mediaplayer.py</title>
      <link>/projects/mediaplayer.py/</link>
      <pubDate>Wed, 06 Mar 2019 01:05:36 +0530</pubDate>
      
      <guid>/projects/mediaplayer.py/</guid>
      <description>I wrote this script some years ago to show currently playing music on conky. I also used this to bind some mediaplayer keys from Openbox to control playback and volume.
Download it here: https://github.com/amhndu/conky-cards/blob/master/mediaplayer.py
This is most likely in need of some re-write. Mostly because I&amp;rsquo;m a better programmer now compared to when I wrote it 4 years ago and the code is hard to look at currently.</description>
    </item>
    
    <item>
      <title>Fly</title>
      <link>/projects/fly/</link>
      <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/projects/fly/</guid>
      <description>Screenshots A simple flight simulator in C++11/OpenGL.
Features a procedurally generated infinite terrain over which you can fly around. With explosions!
Controls: WASD or Arrow keys to change the plane&amp;rsquo;s direction. Click anywhere on the screen and move the mouse to rotate the camera, and scroll to change zoom.
Command line arguments: usage: Fly [options...] -h | --help Print this help text and exit -w X | wX Set window width to X (default: 1024) -H Y | HY Set window height to Y (default: 720) -s Z | sZ Set seed to Z (default: random seed) -f | --fullscreen Set fullscreen mode (default: false) --wireframe Render in wireframe mode (default: false) --plane-box Draw a bounding box around the plane (default: false)  YouTube Playlist: Link to YouTube Playlist</description>
    </item>
    
    <item>
      <title>Ryuuk</title>
      <link>/projects/ryuuk/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/projects/ryuuk/</guid>
      <description>Ryuuk is a concurrent web-server written in C++.
Currently Ryuuk runs only in POSIX compliant environments only.
Building nix
$ git clone https://github.com/amhndu/ryuuk $ cd ryuuk $ mkdir build &amp;amp;&amp;amp; cd build $ cmake .. $ make -ji # where i = no. of cores you can spare  Windows
Who uses windows anyway ?
Currently not portable with windows. Contributions welcome.
Why  Becuase why not ? We wanted to learn a thing or two about sockets &amp;amp; HTTP  Keikaku Short term * Basic HTTP 1.</description>
    </item>
    
    <item>
      <title>life.hs</title>
      <link>/projects/life-hs/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/projects/life-hs/</guid>
      <description>A dead-simple simulator for Conway&amp;rsquo;s Game of Life in Haskell.
 Compiling:
$ ghc --make life.hs  Usage:
./life &amp;lt; seeds/PulsarSeed.txt  Or
$ runhaskell life.hs &amp;lt; seeds/GliderSeed.txt  Seeds are space separeted matrices of 0 and 1 representing dead/alive cell. Note that it uses ANSI escape sequences so this may not work on Windows.</description>
    </item>
    
    <item>
      <title>SimpleNES</title>
      <link>/projects/simplenes/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/projects/simplenes/</guid>
      <description>An NES emulator written in C++ for nothing but fun.
Roughly 40-50% of games should work (ie. games that use either no mapper or mappers 1, 2 or 3).
Examples of games that have been tested to run (but NOT limited to):
(USA/Japan or World versions only i.e. NTSC compatible)
 Super Mario Bros. Contra/Projects Adventure Island Ninja Gaiden Wrecking Crew Megaman and Megaman 2 Mario Bros. Donky Kong and Donkey Kong Jr.</description>
    </item>
    
    <item>
      <title>Prattle</title>
      <link>/projects/prattle/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/projects/prattle/</guid>
      <description> Prattle is a simple chat program with a Client-Server architecture, a collaboration with Koushtav Chakrabarty.
Programmed with C++11 with the SFML library for graphics and TGUI as the GUI framework.
Screenshots For more information, view on GitHub </description>
    </item>
    
    <item>
      <title>xkcd-shuffle</title>
      <link>/projects/xkcd-shuffle/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/projects/xkcd-shuffle/</guid>
      <description>var comic_data; var total_comics = null; var xcontainer, message_div; var comic_list; var current_index = 0; // Instead of shuffling `total_comics`, shuffle 2000 numbers, this way, // xkcd-shuffle will also show new comics when resumed later // Ya, I know, not very elegant or smart but that&#39;s the only way I could think of. // Given three comic updates per week, xkcd will only reach 2000 until 2018 // As of this writing it is 2015 so we are quite safe // 2018 update: bumped to 3000, keeping the comment var limit = 3000; var _seed; var jsonp_load_timer; var loading_message = &#34;</description>
    </item>
    
    <item>
      <title>Gravity</title>
      <link>/projects/gravity/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/projects/gravity/</guid>
      <description>An Orbital survival game Gravity is a survial game set in space, you are in a space station orbiting Earth but things have gone awry and you have a situation with broken satellites, how long can you survie ? (Yes, the premise is very similar to that Hollywood movie of the same name). Programmed in C++11 with the SFML library for graphics. I made this is as my final project in school.</description>
    </item>
    
    <item>
      <title>Mini Tanks</title>
      <link>/projects/tanks-game/</link>
      <pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/projects/tanks-game/</guid>
      <description>A turn-based, artillery game where you destroy other tanks to win in a fully destructible, procedurally generated terrain. Supports multiplayer with upto 8 local players. This was inspired by Pocket Tanks and Scorched Earth. Programmed in C++11 with SFML used for graphics.
Controls and Objective Use your mouse to click on the HUD or press R to set the Rotation of the turret, similarly set power by clicking the power bar (or by hovering the cursor above it and using your scroll wheel)</description>
    </item>
    
  </channel>
</rss>